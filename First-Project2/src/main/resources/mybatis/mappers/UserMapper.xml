<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ho.hwang.mappers.UserMapper">

	<select id="selectUser"
		resultType="com.ho.hwang.vo.AccountVo">
		SELECT u.user_id, u.user_pw, u.employee_id,
		a.authority_name, u.enabled
		FROM userauthority s
		INNER JOIN authority a
		ON s.Authority_ID = a.Authority_ID
		INNER JOIN users u ON s.User_ID = u.User_ID
		WHERE u.user_id = #{username}
	</select>

	<insert id="save">
		INSERT INTO users(user_id, user_pw,
		employee_id, enabled) VALUES(#{userId},#{userPw},#{employeeId}, 1)
	</insert>

	<!-- 담당자 이름 검색 -->
	<select id="selectSE" resultType="String">
		SELECT employee_name
		FROM
		employee e
		INNER JOIN customer c ON c.employee_id_se = e.employee_id
	</select>

	<select id="selectSALES" resultType="String">
		SELECT employee_name
		FROM
		employee e
		INNER JOIN customer c ON c.employee_id_sales = e.employee_id
	</select>




	<select id="selectTotalOS" resultType="OsVO">
		SELECT delivery_id,
		os_name, os_quantity
		FROM os;
	</select>

	<select id="selectEmployee" resultType="EmployeeVO">
		SELECT * from employee
		WHERE employee_id = #{employeeId}
	</select>

	<insert id="insertEmployee">
		INSERT INTO Employee(
		employee_type,
		department_id,
		employee_position,
		employee_name,
		employee_contact,
		employee_phone,
		employee_email,
		employee_status
		)

		VALUES(
		#{employeeType},
		#{departmentId},
		#{employeePosition},
		#{employeeName},
		#{employeeContact},
		#{employeePhone},
		#{employeeEmail},
		'활성'
		);
	</insert>











	<!-- 이름으로 아이디 값 찾기 -->
	<select id="selectCode" resultType="int">
		SELECT code_id
		FROM code
		WHERE code_name = #{type};
	</select>

	<select id="selectDept" resultType="int">
		SELECT department_id
		FROM
		department
		WHERE department_name = #{deptName};
	</select>


	<select id="selectName" resultType="String">
		SELECT e.employee_name
		FROM
		employee e
		INNER JOIN users u ON u.employee_id = e.employee_id AND
		user_id=#{name};
	</select>


	<select id="selectAllEmployee" resultType="EmployeeVO">
		SELECT e.employee_id, c.code_upper, code_name, d.department_name, e.employee_name, e.employee_contact, e.employee_phone, e.employee_email,e.employee_position
		FROM employee e
		INNER JOIN code c ON e.Employee_Type = c.Code_ID
		LEFT OUTER JOIN department d ON e.Department_ID = d.Department_ID
		LIMIT #{start}, 10;
	</select>

	<select id="selectAllEmployee2" resultType="EmployeeVO">
		SELECT e.employee_id, c.code_upper, code_name, d.department_name, e.employee_name, e.employee_contact, e.employee_phone, e.employee_email,e.employee_position
		FROM employee e
		INNER JOIN code c ON e.Employee_Type = c.Code_ID
		LEFT OUTER JOIN department d ON e.Department_ID = d.Department_ID

	</select>

	<select id="selectEmployee_secuve" resultType="EmployeeVO">
		SELECT
		D.department_name, e.employee_position, e.employee_name,
		e.employee_contact , e.employee_phone,
		e.employee_email,e.employee_type,employee_id
		FROM employee e
		INNER JOIN
		department D ON e.Department_ID = D.Department_ID
		INNER JOIN code C ON
		C.code_id = e.Employee_Type AND C.Code_Name='시큐브'
		ORDER BY
		D.department_name;
	</select>

	<select id="selectEmployee_other" resultType="EmployeeVO">
		SELECT c.code_name
		, d.department_name, e.Employee_Name, e.employee_contact,
		e.employee_phone, e.employee_email ,e.employee_id
		FROM employee e
		INNER
		JOIN code c ON c.code_id = e.employee_type
		left outer JOIN department d
		ON d.Department_ID = e.department_id
		WHERE employee_type !=1;
	</select>


	<select id="selectEmployee_type" resultType="String">
		SELECT code_name
		FROM code
		WHERE code_group = '직원구분' ;
	</select>

	<select id="selectDept_name" resultType="String">
		select department_name
		FROM department;
	</select>














	<!-- 관리자 페이지 sql문 -->
	<!-- code 테이블 리스트 -->
	<select id="selectCodeList" resultType="CodeVO">
		SELECT code_id,
		code_group, code_upper, code_name, code_status,code_registrant,
		code_registrationDate, code_modifier, code_modifiedDate
		FROM code
	</select>
	<!-- 코트테이블 삭제 -->
	<delete id="deleteCode" >
		DELETE FROM code
		WHERE code_id = #{codeId}
<!--		<where>-->
<!--			FIND_IN_SET(code_id, #{codeId})-->
<!--		</where>-->
	</delete>
	<!-- 코드테이블 추가 -->
	<insert id="insertCode">
		INSERT INTO code(code_group,code_upper,code_name,code_status,code_registrationDate)
		VALUES(#{codeGroup},#{codeUpper},#{codeName},#{codeStatus}, #{code_registration_date})
	</insert>





	<!-- 직원 삭제 -->
	<delete id="deleteEmployee" parameterType="int">
		DELETE FROM employee
		WHERE employee_id = #{employeeId}
	</delete>

	<!-- 고객사 정보 수정 -->





	<select id="selectDepartment" resultType="String">
		SELECT department_name
		FROM department;
	</select>

	<update id="updateEmployee">
		UPDATE employee
		SET employee_name = #{employeeName},
		    employee_position = #{employeePosition},
		    employee_contact = #{employeeContact},
		    employee_phone = #{employeePhone},
		    employee_email = #{employeeEmail},
		    department_id = #{departmentId}
		WHERE employee_id = #{employeeId};
	</update>

	<update id="updateCodeTable">
		UPDATE code
		SET code_group = #{codeGroup},
			code_upper = #{codeUpper},
			code_name = #{codeName},
			code_status = #{codeStatus}
		WHERE code_id = #{codeId};
	</update>


</mapper>
